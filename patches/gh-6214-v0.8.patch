https://gist.github.com/tjfontaine/62acba502eeda2dbf80d/raw/09881edf63d4d7f5b48bee415a8669a0b2c66693/gh-6214-v0.8.patch

From 826661f33a0cfff9ec5f1c4280d748d3fa67da4b Mon Sep 17 00:00:00 2001
From: Timothy J Fontaine <tjfontaine@gmail.com>
Date: Mon, 14 Oct 2013 11:57:45 -0700
Subject: [PATCH 1/2] http_parser: expose pause/resume method for parser

---
 src/node_http_parser.cc | 11 +++++++++++
 1 file changed, 11 insertions(+)

diff --git a/src/node_http_parser.cc b/src/node_http_parser.cc
index b29afe2..e5b9f3c 100644
--- a/src/node_http_parser.cc
+++ b/src/node_http_parser.cc
@@ -489,6 +489,15 @@ public:
   }
 
 
+  template <bool should_pause>
+  static Handle<Value> Pause(const Arguments& args) {
+    HandleScope scope;
+    Parser* parser = ObjectWrap::Unwrap<Parser>(args.This());
+    http_parser_pause(&parser->parser_, should_pause);
+    return Undefined();
+  }
+
+
 private:
 
   Local<Array> CreateHeaders() {
@@ -564,6 +573,8 @@ void InitHttpParser(Handle<Object> target) {
   NODE_SET_PROTOTYPE_METHOD(t, "execute", Parser::Execute);
   NODE_SET_PROTOTYPE_METHOD(t, "finish", Parser::Finish);
   NODE_SET_PROTOTYPE_METHOD(t, "reinitialize", Parser::Reinitialize);
+  NODE_SET_PROTOTYPE_METHOD(t, "pause", Parser::Pause<true>);
+  NODE_SET_PROTOTYPE_METHOD(t, "resume", Parser::Pause<false>);
 
   target->Set(String::NewSymbol("HTTPParser"), t->GetFunction());
 
-- 
1.8.3.4 (Apple Git-47)


From b24439429aefb352181fb16c7b2f15502d90511c Mon Sep 17 00:00:00 2001
From: isaacs <i@izs.me>
Date: Thu, 17 Oct 2013 10:57:48 -0700
Subject: [PATCH 2/2] http: provide backpressure for pipeline flood

If a client sends a lot more pipelined requests than we can handle, then
we need to provide backpressure so that the client knows to back off.
Do this by pausing both the stream and the parser itself when the
responses are not being read by the downstream client.

Backport of 085dd30
---
 lib/http.js                             |  36 +++++++++-
 test/simple/test-http-pipeline-flood.js | 115 ++++++++++++++++++++++++++++++++
 2 files changed, 150 insertions(+), 1 deletion(-)
 create mode 100644 test/simple/test-http-pipeline-flood.js

diff --git a/lib/http.js b/lib/http.js
index 6ed4b3f..fd37557 100644
--- a/lib/http.js
+++ b/lib/http.js
@@ -150,7 +150,7 @@ function parserOnMessageComplete() {
     }
   }
 
-  if (parser.socket.readable) {
+  if (!parser.socket._drain_paused) {
     // force to read the next incoming message
     parser.socket.resume();
   }
@@ -1828,6 +1828,7 @@ function connectionListener(socket) {
   });
 
   socket.ondata = function(d, start, end) {
+    assert(!socket._drain_paused);
     var ret = parser.execute(d, start, end - start);
     if (ret instanceof Error) {
       debug('parse error');
@@ -1854,6 +1855,12 @@ function connectionListener(socket) {
         socket.destroy();
       }
     }
+
+    if (socket._drain_paused) {
+      // onIncoming paused the socket, we should pause the parser as well
+      debug('pause parser');
+      socket.parser.pause();
+    }
   };
 
   socket.onend = function() {
@@ -1882,9 +1889,36 @@ function connectionListener(socket) {
   // The following callback is issued after the headers have been read on a
   // new message. In this callback we setup the response object and pass it
   // to the user.
+
+  socket._drain_paused = false;
+  function socketOnDrain() {
+    // If we previously paused, then start reading again.
+    if (socket._drain_paused) {
+      socket._drain_paused = false;
+      socket.parser.resume();
+      socket.resume();
+    }
+  }
+  socket.on('drain', socketOnDrain);
+
   parser.onIncoming = function(req, shouldKeepAlive) {
     incoming.push(req);
 
+    // If the writable end isn't consuming, then stop reading
+    // so that we don't become overwhelmed by a flood of
+    // pipelined requests that may never be resolved.
+
+    if (!socket._drain_paused && socket._handle) {
+      var needPause = socket._handle.writeQueueSize > 0;
+      if (needPause) {
+        socket._drain_paused = true;
+        // We also need to pause the parser, but don't do that until after
+        // the call to execute, because we may still be processing the last
+        // chunk.
+        socket.pause();
+      }
+    }
+
     var res = new ServerResponse(req);
     debug('server response shouldKeepAlive: ' + shouldKeepAlive);
     res.shouldKeepAlive = shouldKeepAlive;
diff --git a/test/simple/test-http-pipeline-flood.js b/test/simple/test-http-pipeline-flood.js
new file mode 100644
index 0000000..901f79f
--- /dev/null
+++ b/test/simple/test-http-pipeline-flood.js
@@ -0,0 +1,115 @@
+// Copyright Joyent, Inc. and other Node contributors.
+//
+// Permission is hereby granted, free of charge, to any person obtaining a
+// copy of this software and associated documentation files (the
+// "Software"), to deal in the Software without restriction, including
+// without limitation the rights to use, copy, modify, merge, publish,
+// distribute, sublicense, and/or sell copies of the Software, and to permit
+// persons to whom the Software is furnished to do so, subject to the
+// following conditions:
+//
+// The above copyright notice and this permission notice shall be included
+// in all copies or substantial portions of the Software.
+//
+// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
+// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
+// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
+// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
+// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
+// USE OR OTHER DEALINGS IN THE SOFTWARE.
+
+var common = require('../common');
+var assert = require('assert');
+
+switch (process.argv[2]) {
+  case undefined:
+    return parent();
+  case 'child':
+    return child();
+  default:
+    throw new Error('wtf');
+}
+
+function parent() {
+  var http = require('http');
+  var bigResponse = new Buffer(10240)
+  bigResponse.fill('x');
+  var gotTimeout = false;
+  var childClosed = false;
+  var requests = 0;
+  var connections = 0;
+
+  var server = http.createServer(function(req, res) {
+    requests++;
+    res.setHeader('content-length', bigResponse.length);
+    res.end(bigResponse);
+  });
+
+  server.on('connection', function(conn) {
+    connections++;
+    // kill the connection after a bit, verifying that the
+    // flood of requests was eventually halted.
+    console.log('got connection');
+    setTimeout(function() {
+      gotTimeout = true;
+      conn.destroy();
+    }, 200);
+  });
+
+
+  server.listen(common.PORT, function() {
+    var spawn = require('child_process').spawn;
+    var args = [__filename, 'child'];
+    var child = spawn(process.execPath, args, { stdio: 'inherit' });
+    child.on('exit', function(code) {
+      assert(!code);
+      childClosed = true;
+      server.close();
+    });
+  });
+
+  process.on('exit', function() {
+    assert(gotTimeout);
+    assert(childClosed);
+    assert.equal(connections, 1);
+    // 1213 works out to be the number of requests we end up processing
+    // before the outgoing connection backs up and requires a drain.
+    // however, to avoid being unnecessarily tied to a specific magic number,
+    // and making the test brittle, just assert that it's "a lot", which we
+    // can safely assume is more than 500.
+    assert(requests >= 500);
+    console.log('ok');
+  });
+}
+
+function child() {
+  var net = require('net');
+
+  var gotEpipe = false;
+  var conn = net.connect({ port: common.PORT });
+
+  var req = 'GET / HTTP/1.1\r\nHost: localhost:' +
+            common.PORT + '\r\nAccept: */*\r\n\r\n';
+
+  req = new Array(10241).join(req);
+
+  conn.on('connect', function() {
+    write();
+  });
+
+  conn.on('drain', write);
+
+  conn.on('error', function(er) {
+    gotEpipe = true;
+  });
+
+  process.on('exit', function() {
+    assert(gotEpipe);
+    console.log('ok - child');
+  });
+
+  function write() {
+    while (false !== conn.write(req, 'ascii'));
+  }
+}
-- 
1.8.3.4 (Apple Git-47)
