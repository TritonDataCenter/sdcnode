#!/bin/bash
#
# Build a single node from a given JSON object describing
# build options.
#
# Usage:
#   ./tools/build-a-node BUILD-OPTS BUILD-DIR BUILD-STAMP
#
# Example:
#   ./tools/build-a-node '{"version": "v0.8.23}' \
#       `pwd`/build/nodes/v0.8.23-zone \
#       master-20130913T173257Z-gfb34f86
#
# TODO: document supported build options
# - version:
# - configure_flags:
# - build_env:
# - build_tag:
# - patch_files: Optional. A list of paths (relative to the project root)
#   of patch files to apply.
# - npm_version: Optional. A commitish for a special version of npm to pull in
#   and replace the one include with the given node version.
# - npm_repo: Optional. If `npm_version` is used, this can be set to an alternative
#   git repo (e.g. an npm fork). This is only intended for pre-release experimental
#   builds. The default repo URL is "https://github.com/npm/npm.git"


export PS4='[\D{%FT%TZ}] ${BASH_SOURCE}:${LINENO}: ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
set -o xtrace
set -o errexit
set -o pipefail

TOP=$(cd $(dirname $0)/../ >/dev/null; pwd)
buildOpts=$1
buildDir=$2
buildStamp=$3

echo ""
echo "# Build a node in $buildDir with this config:"
echo "$buildOpts" | json

if [[ -d $buildDir ]]; then
    rm -rf $buildDir
fi
mkdir -p $buildDir

cp -PR $TOP/build/src $buildDir/src
cd $buildDir/src
version=$(echo "$buildOpts" | json version)
git checkout $version

npmVersion=$(echo "$buildOpts" | json npm_version)
if [[ -n "$npmVersion" ]]; then
    npmRepo=$(echo "$buildOpts" | json npm_repo)
    rm -rf deps/npm
    if [[ -n "$npmRepo" ]]; then
        git clone $npmRepo deps/npm
    else
        git clone https://github.com/npm/npm.git deps/npm
    fi
    (cd deps/npm && git checkout $npmVersion)
fi

# Patching
patchFiles=$(echo "$buildOpts" | json patch_files)
if [[ -n "$patchFiles" ]]; then
    numPatchFiles=$(echo "$patchFiles" | json length)
    for (( i=0; i<$numPatchFiles; i++ )); do
        patchFile=$(echo "$patchFiles" | json $i)
        patch -p1 <$TOP/$patchFile
    done
fi

configureFlags=$(echo "$buildOpts" | json configure_flags)
if [[ -z "$configureFlags" ]]; then
    configureFlags="--with-dtrace"
fi
buildEnv=$(echo "$buildOpts" | json build_env)
eval "export $buildEnv"
./configure $configureFlags --prefix=$buildDir/node
make V=1 CC=/opt/local/bin/gcc CXX=/opt/local/bin/g++
make V=1 CC=/opt/local/bin/gcc CXX=/opt/local/bin/g++ install

# trim
rm -rf $buildDir/node/lib/node_modules/npm/.git

# package
imageUuid=$(echo "$buildOpts" | json image)
buildTag=$(echo "$buildOpts" | json build_tag)
if [[ -n "$buildTag" ]]; then
    buildTag=-$buildTag
fi
cd $buildDir
tar czf sdcnode-$version$buildTag-$imageUuid-$buildStamp.tgz node
